buildscript {
    ext {
        kotlinVersion = '1.3.0'
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-serialization:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
    }
}


apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: "kotlinx-serialization"
apply plugin: "kotlin-spring"
apply plugin: "kotlin-jpa"
apply plugin: 'kotlin-kapt'
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

group = 'com.sennotech.sennofit'

bootJar {
    baseName 'app'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {

//    compile project(':senno-spring-boot-util')
//    compile project(':senno-jpa-repository-config')
    compile project(':sennofit-proto')
    compile project(':sennofit-exception-config')
    compile project(':euler-proto')
    compile project(':senno-proto')
    compile project(':senno-proto-client')

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin"

    // spring boot
//    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter'
    implementation "org.springframework.boot:spring-boot-starter-data-redis-reactive"
    runtime 'org.springframework.boot:spring-boot-devtools'

    testCompile 'org.springframework.boot:spring-boot-starter-test'

    implementation "commons-codec:commons-codec:1.11"

    // GRPC
//    compile 'io.github.lognet:grpc-spring-boot-starter:3.0.0'
//    compile 'com.google.api.grpc:proto-google-common-protos:1.12.0'
//    compile 'io.grpc:grpc-netty-shaded:1.14.0'
//    compile 'io.grpc:grpc-protobuf:1.14.0'
//    compile 'io.grpc:grpc-stub:1.14.0'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb', version: '2.1.3.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.1.3.RELEASE'
    compileOnly("org.projectlombok:lombok:1.18.0")

    // tencent cos
    compile("com.qcloud:cos_api:5.4.10")

    compile("org.json:json:20180130")
}

//log conflict
configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

//protobuf {
//    protoc {
//        artifact = "com.google.protobuf:protoc:3.6.1"
//    }
//    plugins {
//        grpc {
//            artifact = 'io.grpc:protoc-gen-grpc-java:1.14.0'
//        }
//    }
//    generateProtoTasks {
//        all()*.plugins {
//            grpc {}
//        }
//    }
//}


dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
}