buildscript {
    ext {
        springBootVersion = "2.0.3.RELEASE"
//        kotlinVersion = "1.3.0"
    }

    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter" }
//        maven { url "https://kotlin.bintray.com/kotlinx" }
    }

    dependencies {
//        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
//        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.6"
    }
}


apply plugin: 'idea'
apply plugin: 'java'
//apply plugin: "kotlin-spring"
//apply plugin: "io.spring.dependency-management"
apply plugin: "com.google.protobuf"

group = "com.sennotech.sennofit"

//compileKotlin {
//    kotlinOptions.jvmTarget = "1.8"
//}
//compileTestKotlin {
//    kotlinOptions.jvmTarget = "1.8"
//}

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter" }
//    maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {
    // Kotlin
//    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
//    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

    // spring boot
//    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
//    compileOnly "org.springframework.boot:spring-boot-configuration-processor"
//    compile "org.springframework.boot:spring-boot-starter-actuator"
//    compile "org.springframework.boot:spring-boot-starter-web"
//    compile "org.springframework.boot:spring-boot-starter"
//    compile "org.springframework.boot:spring-boot-starter-data-redis"
//    runtime "org.springframework.boot:spring-boot-devtools"
//    testCompile "org.springframework.boot:spring-boot-starter-test"

    // GRPC
    compile "io.github.lognet:grpc-spring-boot-starter:3.0.0"
    compile "com.google.api.grpc:proto-google-common-protos:1.12.0"
    compile "io.grpc:grpc-netty-shaded:1.14.0"
    compile "io.grpc:grpc-protobuf:1.14.0"
    compile "io.grpc:grpc-stub:1.14.0"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

import org.apache.tools.ant.taskdefs.condition.Os

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.6.1"
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.14.0'
        }

//        if (Os.isFamily(Os.FAMILY_MAC)) {
//            typescript {
//                path = project.projectDir.getPath() + '/tools/protoc-gen-ts-darwin'
//            }
//        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
//            typescript {
//                path = project.projectDir.getPath() + '/tools/protoc-gen-ts-linux'
//            }
//        } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//            typescript {
//                path = project.projectDir.getPath() + '/tools/protoc-gen-ts-windows'
//            }
//        }

    }

    generateProtoTasks {
        ofSourceSet("main").each { task ->

            task.plugins {
                grpc {}
//                if (Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_UNIX) || Os.isFamily(Os.FAMILY_WINDOWS)) {
//                    typescript {}
//                }
            }

            task.generateDescriptorSet = true

            // Allows to override the default for the descriptor set location
//            task.descriptorSetOptions.path =
//                    "${projectDir}/build/descriptors/descriptors.dsc"

            task.descriptorSetOptions.includeSourceInfo = true
            task.descriptorSetOptions.includeImports = true
        }

    }
}